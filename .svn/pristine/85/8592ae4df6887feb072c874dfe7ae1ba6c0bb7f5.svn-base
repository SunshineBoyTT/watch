package com.spring.base.websocket;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketHandler;
import org.springframework.web.socket.WebSocketMessage;
import org.springframework.web.socket.WebSocketSession;

import com.spring.base.websocket.common.Global;


public class SystemWebSocketHandler implements WebSocketHandler{
	
	
	 private static final Logger logger;

	    private static final ArrayList<WebSocketSession> users;

	    static {
	        users = new ArrayList<>();
	        logger = LoggerFactory.getLogger(SystemWebSocketHandler.class);
	    }

	 //   @Autowired
	 //   private WebSocketService webSocketService;
	

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus arg1)
			throws Exception {
		// TODO Auto-generated method stub
		
		UserSocketVo userSocketVo = (UserSocketVo) session.getAttributes().get("websocket_username");
		logger.debug("websocket connection closed......");
		WSSessionLocalCache.remove(userSocketVo.getSessionid());
		
	}

	@Override
	public void afterConnectionEstablished(WebSocketSession session)
			throws Exception {
		// TODO Auto-generated method stub
		
		
		logger.debug("connect to the websocket success......");
		// sessions.add(session);
		UserSocketVo userSocketVo = (UserSocketVo) session.getAttributes().get("websocket_username"); // 获取用户
		if (userSocketVo != null) {
			userSocketVo.setWebSocketSession(session);
			if (WSSessionLocalCache.exists(userSocketVo.getSessionid())) {
				WSSessionLocalCache.remove(userSocketVo.getSessionid());
			}
			WSSessionLocalCache.put(userSocketVo.getSessionid(), userSocketVo);
//			session.getAttributes().put("websocket_username", userSocketVo);
			//连接后先发送一次现有数据
		/*	WsResponse response = new WsResponse();
			/*	response.setTraffic_lastweek_list(Global.history_traffic_list);
			response.setTraffic_today_list(Global.traffic_today_list);
			response.setTraffic_area_avg(Global.traffic_area_avg);
			response.setTraffic_today_speed_1(Global.traffic_today_speed_1);
			response.setTraffic_today_speed_2(Global.traffic_today_speed_2);
			response.setTraffic_today_speed_3(Global.traffic_today_speed_3);
			TrafficZb zb = new TrafficZb();
			zb.setJtydzs(Global.jtydzs);
			zb.setYdlcbl(Global.ydlcbl);
			zb.setDmzcgdpjsd(Global.dmzcgd);
			zb.setZhstgjpjsd(Global.zhstgj);
			response.setTrafficzb(zb);
		
			JsonHelper helper = new JsonHelper();
			TextMessage message = new TextMessage(helper.objectToJson(response));
			session.sendMessage(message);
				*/
		}
		
		
		
		
	}

	@Override
	public void handleMessage(WebSocketSession session, WebSocketMessage<?> message)
			throws Exception {
		// TODO Auto-generated method stub
		Map<String, Object> attributes = session.getAttributes();
		Object payload = message.getPayload();
		System.out.println("-------------ccc:"+message.getPayload());
		logger.info("定时消息");
		String payloadMessage[] = (payload+"").split(",");
//		Global.postionId = payloadMessage[0];
//		Global.employeeId = payloadMessage[1];
		// 用户建立连接成功后主动推送用户的sessionid给客户端
		UserSocketVo userSocketVo = (UserSocketVo) attributes.get("websocket_username"); // 获取用户
		
		JSONUtils json = new JSONUtils().setParams("uid", userSocketVo.getSessionid()).setParams("code",0);
		TextMessage returnMessage = new TextMessage(json.buildJSON());
		userSocketVo.getWebSocketSession().sendMessage(returnMessage);
//		if(message instanceof TextMessage){
//			TextMessage receiveMessage = (TextMessage)message;
//			System.out.println(receiveMessage.getPayload());
//		}
	}
	
    


	@Override
	public void handleTransportError(WebSocketSession session, Throwable exception)
			throws Exception {
		// TODO Auto-generated method stub
		
		UserSocketVo userSocketVo = (UserSocketVo) session.getAttributes().get("websocket_username");
		WSSessionLocalCache.remove(userSocketVo.getSessionid());
		logger.debug(" error:" + userSocketVo.getSessionid());
		try {
			if (session.isOpen() && !(exception instanceof IOException)) {
				session.close();
			}
		} catch (Exception e) {
			logger.debug(e.getMessage() + " sessionid: " + userSocketVo.getSessionid());
		}
		logger.debug("websocket connection closed......");
		
	}

	@Override
	public boolean supportsPartialMessages() {
		// TODO Auto-generated method stub
		return false;
	}
	
	
	/**
     * 给所有在线用户发送消息
     *
     * @param message
     */
 /*   public void sendMessageToUsers(TextMessage message) {
        for (WebSocketSession user : users) {
            try {
                if (user.isOpen()) {
                    user.sendMessage(message);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }*/

}
